@model IEnumerable<EpicBookstore.Models.CartModel>

@{
    ViewData["Title"] = "Index";
}

@* <h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.TotalPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ItemModel)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserId)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.TotalPrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ItemModel.ISBN)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UserId)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.CartId">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.CartId">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.CartId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table> *@

@* @if (Model != null)
{
    <table>
        <thead>
            <tr>
                <th>Item</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.ItemModel.Name</td>
                    <td>@item.ItemModel.Price</td>
                    <td>@item.Quantity</td>
                    <td>
                        <form asp-action="RemoveFromCart" asp-route-id="@item.CartId">
                            <button type="submit">Remove</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
 
    <p>Total: @Model.Sum(i => i.ItemModel.Price * i.Quantity)</p>
    <a asp-action="Checkout">Checkout</a>
}
else
{
    <p>You don't have any items in your cart.</p>
} *@

@*For Icons*@
<link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>

@* 
    <!DOCTYPE html>
    <html>
@if (Model != null)
{
        <head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewData["Title"]</title>

        <style>

            .container {
                display: flex;
                flex-wrap: wrap;
            }

            .items-container {
                display: flex;
                flex-wrap: wrap;
                width: calc(100% - 250px); /* Adjust width to accommodate the price container */
            }

            .item-container {
                display: flex;
                flex-direction: row;
                align-items: center;
                justify-content: space-between;
                border: 1px solid #ccc;
                padding: 10px;
                margin-bottom: 20px;
                width: 1000px;
            }

            .price-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: space-between;
                border: 1px solid #ccc;
                padding: 10px;
                margin-bottom: 20px;
                width: 220px;
                height: 220px;
                margin-left: 20px; /* Add margin to separate from item containers */
            }

            .item-details {
                display: flex;
                flex-direction: column;
                flex: 1;
                margin-left: 10px;
            }

            .item-image {
                width: 150px;
                height: 200px;
                object-fit: cover;
            }

            .item-title {
                font-size: 1.5rem;
                margin-bottom: 10px;
            }

            .item-description {
                margin-bottom: 10px;
                margin-left: 20px;
            }

            .item-price {
                margin-bottom: 10px;
                font-size: 1.5rem;
                color: #ff0000;
            }

            .item-quantity {
                margin-bottom: 10px;
            }

            .remove-item-button {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 3px;
                cursor: pointer;
            }

            .check-out-button {
                background-color: #007bff;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                cursor: pointer;
                display: flex;
                align-items: center;
            }

                .check-out-button i {
                    margin-left: 5px;
                }

        </style>
    </head>
    <body>
        <h2>Shopping Cart </h2>
        <div class="container">
            <div class="items-container">
                @foreach (var itemGroup in Model.GroupBy(item => item.ItemModel.Id))
                {
                    var firstItem = itemGroup.First();
                    <div class="item-container" data-item-id="@firstItem.ItemModel.Id">
                        <img src="@firstItem.ItemModel.CoverImageUrl" alt="Item Image" class="item-image">
                        <div class="item-details">
                            <h2 class="item-title">@firstItem.ItemModel.Name</h2>
                            <p class="item-price">@firstItem.ItemModel.Price.ToString("C")</p>
                            <p class="item-quantity">Quantity: @itemGroup.Sum(item => item.Quantity)</p>
                        </div>
                        <button class="remove-item-button" onclick="removeItem('@firstItem.ItemModel.Id')">Remove</button>
                    </div>
                }
            </div>
            <div class="price-container">
                <div>
                    <h2 class="price-title">SUMMARY</h2>
                </div>
                <div id="total-price">
                    <p>Total: @Model.Sum(item => item.ItemModel.Price * item.Quantity).ToString("C")</p>
                </div>
                <div>
                    <button type="submit" class="check-out-button">
                        Checkout
                        <i class='bx bx-pound'></i>
                    </button>
                </div>
            </div>
        </div>

        <script>
            function removeItem(itemId) {
                // Find all item containers with the specified itemId
                var itemContainers = document.querySelectorAll('[data-item-id="' + itemId + '"]');

                if (itemContainers.length > 0) {
                    // Initialize the total price to zero
                    var totalPrice = 0;

                    // Loop through each item container with the specified itemId
                    itemContainers.forEach(function (itemContainer) {
                        // Get the price and quantity of the item
                        var itemPrice = parseFloat(itemContainer.querySelector('.item-price').innerText.replace(/[^\d.-]/g, ''));
                        var itemQuantity = parseInt(itemContainer.querySelector('.item-quantity').innerText.split(': ')[1]);

                        // Calculate the total price of all quantities of the item
                        totalPrice += itemPrice * itemQuantity;

                        // Remove the item container from the DOM
                        itemContainer.remove();
                    });

                    // Update the total price by subtracting the total price of all quantities of the removed item
                    var totalPriceElement = document.getElementById('total-price');
                    var currentTotalPrice = parseFloat(totalPriceElement.innerText.replace(/[^\d.-]/g, ''));
                    var newTotalPrice = currentTotalPrice - totalPrice;
                    totalPriceElement.innerHTML = "<p>Total: " + newTotalPrice.toLocaleString('en-US', { style: 'currency', currency: 'USD' }) + "</p>";

                    // You may need additional logic here to update the cart data on the server
                }
            }
        </script>
    </body>
    }
    else
    {
        <head>
        <meta name="viewport" content="width=device-width" />
        <title>@ViewData["Title"]</title>
    <style>
        .no-items-container {
        display: flex;
        flex - direction: row;
        align - items: center;
        justify - content: space - between;
        border: 1px solid #ccc;
        padding: 10px;
        margin - bottom: 20px;
        width: 1000px;
        }

        </style>
        </head>

     <div class="no-items-container">
         <div>
         <h2>No Items in Cart</h2>
         <button>Continue Shopping</button>
        </div>
     </div>
    }
</html> *@

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewData["Title"]</title>

    <style>
        .container {
            display: flex;
            flex-wrap: wrap;
        }

        .items-container {
            display: flex;
            flex-wrap: wrap;
            width: calc(100% - 250px); /* Adjust width to accommodate the price container */
        }

        .item-container {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: space-between;
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 20px;
            width: 1000px;
        }

        .price-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-between;
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 20px;
            width: 220px;
            height: 220px;
            margin-left: 20px; /* Add margin to separate from item containers */
        }

        .item-details {
            display: flex;
            flex-direction: column;
            flex: 1;
            margin-left: 10px;
        }

        .item-image {
            width: 150px;
            height: 200px;
            object-fit: cover;
        }

        .item-title {
            font-size: 1.5rem;
            margin-bottom: 10px;
        }

        .item-description {
            margin-bottom: 10px;
            margin-left: 20px;
        }

        .item-price {
            margin-bottom: 10px;
            font-size: 1.5rem;
            color: #ff0000;
        }

        .item-quantity {
            margin-bottom: 10px;
        }

        .remove-item-button {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
        }

        .check-out-button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
        }

            .check-out-button i {
                margin-left: 5px;
            }

        .no-items-container {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: space-between;
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 20px;
            width: 1000px;
        }
    </style>
</head>
<body>
    @if (Model != null && Model.Count() > 0)
    {
        <h2>Shopping Cart </h2>
        <div class="container">
            <div class="items-container">
                @foreach (var itemGroup in Model.GroupBy(item => item.ItemModel.Id))
                {
                    var firstItem = itemGroup.First();
                    <div class="item-container" data-item-id="@firstItem.ItemModel.Id">
                        <img src="@firstItem.ItemModel.CoverImageUrl" alt="Item Image" class="item-image">
                        <div class="item-details">
                            <h2 class="item-title">@firstItem.ItemModel.Name</h2>
                            <p class="item-price">@firstItem.ItemModel.Price.ToString("C")</p>
                            <p class="item-quantity">Quantity: @itemGroup.Sum(item => item.Quantity)</p>
                        </div>
                        <button class="remove-item-button" onclick="removeItem('@firstItem.ItemModel.Id')">Remove</button>
                    </div>
                }
            </div>
            <div class="price-container">
                <div>
                    <h2 class="price-title">SUMMARY</h2>
                </div>
                <div id="total-price">
                    <p>Total: @Model.Sum(item => item.ItemModel.Price * item.Quantity).ToString("C")</p>
                </div>
                <div>
                    <button type="submit" class="check-out-button">
                        Checkout
                        <i class='bx bx-pound'></i>
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="no-items-container">
            <div>
                <h2>No Items in Cart</h2>
                <button>Continue Shopping</button>
            </div>
        </div>
    }
    @* <script>
        function removeItem(itemId) {
            // Find all item containers with the specified itemId
            var itemContainers = document.querySelectorAll('[data-item-id="' + itemId + '"]');

            if (itemContainers.length > 0) {
                // Initialize the total price to zero
                var totalPrice = 0;

                // Loop through each item container with the specified itemId
                itemContainers.forEach(function (itemContainer) {
                    // Get the price and quantity of the item
                    var itemPrice = parseFloat(itemContainer.querySelector('.item-price').innerText.replace(/[^\d.-]/g, ''));
                    var itemQuantity = parseInt(itemContainer.querySelector('.item-quantity').innerText.split(': ')[1]);

                    // Calculate the total price of all quantities of the item
                    totalPrice += itemPrice * itemQuantity;

                    // Remove the item container from the DOM
                    itemContainer.remove();
                });

                // Update the total price by subtracting the total price of all quantities of the removed item
                var totalPriceElement = document.getElementById('total-price');
                var currentTotalPrice = parseFloat(totalPriceElement.innerText.replace(/[^\d.-]/g, ''));
                var newTotalPrice = currentTotalPrice - totalPrice;
                totalPriceElement.innerHTML = "<p>Total: " + newTotalPrice.toLocaleString('en-US', { style: 'currency', currency: 'USD' }) + "</p>";

                // You may need additional logic here to update the cart data on the server
            }
        }
    </script> *@
    <script>
        function removeItem(itemId) {
            // Find all item containers with the specified itemId
            var itemContainers = document.querySelectorAll('[data-item-id="' + itemId + '"]');

            if (itemContainers.length > 0) {
                // Initialize the total price to zero
                var totalPrice = 0;

                // Loop through each item container with the specified itemId
                itemContainers.forEach(function (itemContainer) {
                    // Get the price and quantity of the item
                    var itemPrice = parseFloat(itemContainer.querySelector('.item-price').innerText.replace(/[^\d.-]/g, ''));
                    var itemQuantity = parseInt(itemContainer.querySelector('.item-quantity').innerText.split(': ')[1]);

                    // Calculate the total price of all quantities of the item
                    totalPrice += itemPrice * itemQuantity;

                    // Remove the item container from the DOM
                    itemContainer.remove();
                });

                // Update the total price by subtracting the total price of all quantities of the removed item
                var totalPriceElement = document.getElementById('total-price');
                var currentTotalPrice = parseFloat(totalPriceElement.innerText.replace(/[^\d.-]/g, ''));
                var newTotalPrice = currentTotalPrice - totalPrice;
                totalPriceElement.innerHTML = "<p>Total: " + newTotalPrice.toLocaleString('en-US', { style: 'currency', currency: 'USD' }) + "</p>";

                // Send a request to the server to update the cart data
                fetch('/update-cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        itemId: itemId
                    })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to update cart');
                        }
                        // Handle success response if needed
                    })
                    .catch(error => {
                        console.error('Error updating cart:', error.message);
                        // Handle error if needed
                    });
            }
        }
    </script>

</body>
</html>








    